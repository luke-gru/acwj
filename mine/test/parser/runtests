#!/bin/sh
# Run each test and compare
# against known good output

set -e

root=$PWD
make parser
make selfparser

set +e

cd test/compiler
successes=0
failures=0

# Try to use each input source file
for i in *.c
do
    # We can't do anything if there's no file to test against
    if [ ! -f "$root/test/compiler/$i.out" -a ! -f "$root/test/compiler/$i.err" ]
    then
        echo "Can't run test on test/compiler/$i, no output file!"

        # Output file: compile the source, run it and
        # capture the output, and compare it against
        # the known-good output
    else if [ -f "$root/test/compiler/$i.out" ]
    then
        # Print the test name, compile it
        # with our compiler
        echo -n $i
        # HACK: when we remove the linking to lib/mylib.c in the compiler, we
        # can remove this `cd` hack.
        cd ../..
        ./bin/parser -T "test/compiler/$i" > test/parser/out1
        cd test/parser

        # NOTE: we switch back to root directory during execution because some
        # test scripts currently rely on being started from there.
        cd ../..
        ./bin/selfparser -T  "test/compiler/$i" > test/parser/out2
        cd test/parser

        # Compare this against the correct output
        cmp -s "out1" "out2"

        # If different, announce failure
        # and print out the difference
        if [ "$?" -eq "1" ]
        then
            echo ": failed"
            diff -c "out1" "out2"
            failures=$((failures+1))
            echo
            # No failure, so announce success
        else
            successes=$((successes+1))
            echo ": OK"
        fi

        # Error file: compile the source and
        # capture the error messages. Compare
        # against the known-bad output. Same
        # mechanism as before
    else if [ -f "$root/test/compiler/$i.err" ]
    then
        echo "skipping $i, error test"
    fi
fi
fi
rm -f out1 out2
done

echo "$successes successful"
echo "$failures failed"
exit $failures
