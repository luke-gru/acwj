x86 Assembly syntax:
===================

mov S, D (move source to dest)
push S (push source onto stack)
pop D (pop top of stack into dest)
sub S D (subtract source from dest [d = d - s])
lea S D (load effective address of source into dest)
cmp S1 S2 (set condition codes according to S1-S2)


Function calls:
---------------
callee-saved (callee must save these): %rbx, %rbp, %r12-r15

To call a function, the program should place the first six integer or pointer parameters in the
registers %rdi, %rsi, %rdx, %rcx, %r8, and %r9; subsequent parameters (or parameters
larger than 64 bits) should be pushed onto the stack, with the first argument topmost
If the function has a return value, it will be stored in %rax after the function call.

ex:
# Call foo(1, 15)
movq $1, %rdi # Move 1 into %rdi
Movq $15, %rsi # Move 15 into %rsi
call foo # Push return address and jump to label foo

Example Program
---------------
```
int main() {
    int a, b;
    a = 1000;
    b = 2000;
    printint(a+b);
    return(0);
}
```

parses to:

```
  A_INTLIT 1000 (lnode)
  A_IDENT a (rnode)
A_ASSIGN
  A_INTLIT 2000 (lnode)
  A_IDENT b (rnode)
A_ASSIGN
A_GLUE

    A_IDENT rval a (lnode)
    A_IDENT rval b (rnode)
  A_ADD (lnode)
A_FUNCALL printint
A_GLUE

    A_INTLIT 0 (lnode)
  A_WIDEN (lnode)
A_RETURN
A_GLUE

A_FUNCTION main
```

Generating A_ASSIGN asm code (gen.c)
------------------------------------
1) genAST on A_GLUE
2) genAST on A_ASSIGN node (`a`)
3) genAST on left node (A_INTLIT), loads a register with value 1000, returns it
as `leftreg`
4) genAST on right node (A_IDENT), returns sentinel value NOREG as A_ASSIGN
takes care of generating the assignment code for non-rvalue identifiers.
5) Calls cgstorglob(leftreg, symbol_for(`a`)), which generates a MOV
instruction, moving the value of register leftreg into the variable, and
returning the `leftreg` value. This value is returned because assignment is
considered an expression in the language (`a = b = 1000`).
6) Registers are freed (`leftreg`)
...

Chained Member access
---------------------

ex:

struct Bar {
    int val;
};
struct Foo {
    int val;
    struct Bar bar;
}

Foo foo;

int main() {
    printf("%d\n", foo.val);
}

Tree for `foo.val`:

A_FUNCTION main
  GLUE
    A_FUNCALL printf
      GLUE
        GLUE
          A_STRLIT (asm label -1)
        ============
        A_DEREF rval
          A_ADD
            A_ADDR foo
            A_INTLIT 0
        ============
    A_RETURN
      A_WIDEN
        A_INTLIT 0

Tree for `foo.bar.val`:

        ============
        A_DEREF rval
          A_ADD
            A_ADDR foo
            A_INTLIT 4
        ============

Chained member access with ->
=============================

fooptr->bar = &bar;

tree:
      A_ASSIGN
        A_ADDR bar
        A_DEREF
          A_ADD
            A_IDENT rval fooptr
            A_INTLIT 4

fooptr->bar->val = &bar;

      A_ASSIGN
        A_ADDR bar
        A_DEREF
          A_ADD
            A_DEREF
              A_ADD
                A_IDENT rval fooptr
                A_INTLIT 4 (fooptr->bar offset)
            A_INTLIT 4 (bar->val offset)

Increment/Decrement
===================
Non-identifiers:
ex: v.val++

v.val++; // same as (v.val = v.val + [1], v.val - [1])
++v.val; // same as (v.val = v.val + [1])

v.val++ tree:

       A_POSTINC
          A_DEREF (char*)
            A_ADD
              A_ADDR v
              A_INTLIT 0

       A_ASSIGN
          A_ADD
            A_DEREF rval (char*)
              A_ADD
                A_ADDR v
                A_INTLIT 0
            A_INTLIT 1
          A_DEREF (char*)
            A_ADD
              A_ADDR v
              A_INTLIT 0



Identifiers:
a++ // same as (a = a + [1], a - [1])
--a // same as (a = a - [1])


selfhosted in newsym:
        A_ASSIGN
          A_TERNARY
            A_TOBOOL
              A_IDENT rval name (char*)
            A_FUNCALL strdup
              GLUE
                A_IDENT rval name (char*)
            A_INTLIT 0
          A_DEREF (char*)
            A_ADD
ERROR

bin/compiler:

        A_ASSIGN
          A_TERNARY
            A_TOBOOL
              A_IDENT rval name (char*)
            A_FUNCALL strdup
              GLUE
                A_IDENT rval name (char*)
            A_INTLIT 0
          A_DEREF (char*)
            A_ADD
              A_IDENT rval node (struct symtable*)
              A_INTLIT 8
